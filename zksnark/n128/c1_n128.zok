import "ecc/edwardsScalarMult" as scalarMult;
import "ecc/edwardsAdd" as add;
import "utils/pack/bool/nonStrictUnpack256" as unpack256bool;
from "ecc/babyjubjubParams" import BabyJubJubParams;
import "ecc/babyjubjubParams" as context;
import "hashes/poseidon/poseidon" as poseidon;

def main(private field x) -> field[2][2]{
  BabyJubJubParams context = context();
  field[2] G = [context.Gu, context.Gv];

  //Public parameters pp = [h]_t-1
  field [64][2] P = [
    [13522923618312071650302635321243604285850047309527197690046697525217605329069,10932479589697132144784969532699395534930855291504911162904822788453670442360], 
    [8114648683678704144160373335568649650033887919835121743889293380417032819048,656854882584790177677729777925139592743926058718260747964140015719296150373], 
    [8041613747207015951652469932410251687395045749506408379408649945823434186008,12428011484007481797110341238074166855271849601553355310921443451952904022044], 
    [14013519439908198872993428785218173227282766975638574393768474101967215695707,17845049008754978913629757984435994481151160292994615504430998303593900334408], 
    [1402373490401517435430617803705905887485416771124198962153878070450451068870,9017471604939841597771391014381989639499247297991510365667057222982451512737], 
    [3233258710148519653678468997312483566033225244473513302514665889236078840919,492251951977314165678115188025638221648164898529444060321827346693474619710], 
    [6122099670931574288771415108927499867587012211568789780844915301941028823095,21178637537128131405476429673929303069094383313059862572738011529714572917631], 
    [12622440090255384237255013442242705733784451139526153129418517795070995074850,4194712060082230815603589382688226154389044142310230526630529105176762537692], 
    [2722608305005439479193990758048802438123188513020400267422805672440133917500,15797363996002005356886757592663245252565154273497467727132039112023347580096], 
    [9062808671582827613170692309178448901390449318552658593716865644949625871071,21676735312726643795684791526947223355369715898499582680107431404847922535680], 
    [1353660565437383045760952703662832908457590650261304563954355636395067904007,8883168637095109675657770065085448739490641966588658812092540185427533250826], 
    [13758196100427828173210969285302995392820131265798778894799600827081656263537,12497620618324140130152953503196676337772564983266980553264277334376343388022], 
    [13669428520811512903250761165677071113396705745204198179555180668628784030839,9326261991540610826357803349045949017484282200029688908609878980249522292602], 
    [16663798398752345278318950390617648403214356720351196511356367038833957137258,4159747059060700537436978311750815638959560390953033270101886351971382000352], 
    [18895158218800023507902499576788671807111315959496670964390898066885479414807,20382481936658486378390908399421388443911545843541108003114629498024888851169], 
    [9286177236154143424133648908780606582159442091616421449129620991015411136673,14339354332021542387579399802787831930789109771730853004872677972098680915785], 
    [15790627668262381860557775478744176697229067749803935520575542695656895958265,21792667528261798927740245404798075370589350107227358861734540536290326622075], 
    [116903037628064882754486284684581815863698475807065100720396421902255150807,12643694035441989263291913289917273701542231429699922862832352992843924689531], 
    [21696578061237055180776031924240504223064610082142908129099055816777137395986,3086297261576598249557542963081956413127506337976043093988703651844176792801], 
    [9472634215255706852976888631271474033840840483991763680328029006838503963737,20371549551951416291795931298780153010361058828371676415298092219239641687267], 
    [17939878053522807693041682482663815809871123735505683899557804333270785101340,2858115490163899532827960321362039623813676792840372391971401033282969760657], 
    [4244716446454599732254264468756583803163211453243289621859784669676195822005,6223180153702472621657129424724826280036701416161586502897051744019863432236], 
    [10796186417512261111584449065707358059065693391449220637575410862283392965262,20433964648360715002460631343305678037223167559410088117901533888489944069981], 
    [12292805404800515777196680372210012590106876376428714581085044439333879155815,21047059897870261982441837521554840323057369237712641667012464763212185303946], 
    [4036643514251258925176835359181491989016530606789260181572619359605997612734,20892913132148972240418549246339531098419537241377811671168895039101343430874], 
    [2191062615004797331173509497666739672333986509701633222568707534857254535820,6035307367068674461253412299155437816960462442480675535887637115804948638574], 
    [20199744775889963560679632645901439560323736632285481662750331038083593628305,15719593969311364661500635978735460728106091077737321347829690274185704623679], 
    [1986680956705993963672702962978088639218610288645769978933629729041701847987,13176096937806177948713085943199440805542615997694096754726022370377087426250], 
    [105759370204263651042932569192326038625984882184202086111703145724164286925,3483853770216397420958237227641330540595418123896679654234151232957137173525], 
    [15705460337996580484496938631150153085358661213448952577661885315712350900316,9054835128130596175879696512526551802590862726583244534242789791600517618188], 
    [3650940552300030039973090926347683376401320795881030476578589986981340189285,5589494705174369848816408878382081089276267226874919923862604311484914263547], 
    [1927378731920787414759925365797572419782561418055888912278999577775354784741,8071065754985433826182085767935910639273710350766126087535117334826611756523], 
    [2736528378280303800701241869448208283973773660120441436068268643270833145637,13471134281798491409367322534949638841164924817359597004009251635238957546488], 
    [3060150527780856434378103331040664779344208156899998109601629486661526390614,20335069778024797920823002461401327351266912634360032502987279832793865892407], 
    [12900636379358408893368754612896313143864964487248565133007557507168870282525,13578955048698833942236943866018049403784206531194133187115747344691768845899], 
    [2760087985956088721143580626323521796846853091040458244400957835356008667615,18017414152331015725398680422904237640405184067734807029780760469063644310272], 
    [11241335729403464579277110600804874079195055660979563151810194014911539434221,7181560264324773535544248276597999120925893131107564122469377289018119692421], 
    [1404138265872079534989710239562610621677967859373602498270389605874312502252,16689963701811496877608688239807608062245722642100167777176187955561401215759], 
    [12322709699009532052709914768456647697842746743959478252968361226159885368879,9651201820167960734662744340944303720168466371379793407690226698968211671196], 
    [10491687343875243352362755151666519665587315025113766581629750369288048351554,709336751790030519003335974281752174145180089598386098458397539941899833872], 
    [16411232673219630648571008510683839495056848416423360958510252770449947535923,9655623079024604393684867540771061422976013983967839338631220409885519045290], 
    [21681413385397214503125935025190727632935256662662240556121481216808424620455,14392496887631156772124900414565895675189529372502376805026312841647514354150], 
    [2891532490367088900402046069459745169008643600970261972833736988752348678213,18007113324627016635867302446356813519812601137588487840344170218904719217247], 
    [11642976045011964693930699848308776829342204458077271595143738202719204738061,11274314676902831597018501598068219980903325452352483333171461299944121467822], 
    [768343174548837597733600630969917023601946544732670945826778590920788820580,17892259038498829418198896942870262667955514358746774389883719276979772670471], 
    [3172383050148108345540777825450624825108590489377239052450075079717006978311,4469868133498729673830476013285954618810279991581521464540666329098942277900], 
    [12348929127327605875919903914963527945782062535176632768768403444701812722769,10468936666417599995424698940278420862919001292889558012700802762748949344671], 
    [21204118655859164916856831780979797047233843750712102631606782314191245688838,10888640844602920805453856813844176347637296446980154556149785591569896699782], 
    [13133744367533292137207105639112157831581803625979413283426952313487476788816,21675580176381662802624551095101271316325257570634529296989185828683501571263], 
    [13124090015144038798982183949263474525021808197003727846724273836806838944141,17254902270783466620866550535079991518691117698471866311852972538380187083604], 
    [7947797124627209856240430938353514418087177420446824968529986427015583778932,10500288117873262227643252000892476109391535207021957906341501601062994449518], 
    [124876704626891462371898817215697707633961152208182842688638465338379708013,18431255159390658689678266773341258871617068817045321052855566931710666267669], 
    [7105328582972408242559375294625834167410015457437301700784406551455794304031,6545699580900673713606078093378497090841191187262029786190376162690118459763], 
    [4202164746413267336477437802253704589508220692810243393057090229499986593541,19919827314426706288427225149081248233750954143833323141508683511587494099947], 
    [4703876129197142125022027546056374628773407486545912089294631654206924837833,2102613898089944769873946877251915185853829869807095889322088156879691423118], 
    [3217442759980153302560377812706121327315311706939953194088892128052785645238,14321749769873218821418862987180582356049810670379403809430999625785428728788], 
    [13817345498172662452614431613320360488762345337194044859874174652793281234156,20964657014866936144542171868228643614782500343392074123144168540720225981062], 
    [10841200175738382427220538320068424161944317638336089481641102509416999740074,7787325652008096802632731076271724910851582335115295970269540282957181078451], 
    [4514500904935389696014965748764416244620201970458199462486379897826935076108,5285680869205375027834624295565167153379973178602229570054976163946426485115],
    [4202164746413267336477437802253704589508220692810243393057090229499986593541,19919827314426706288427225149081248233750954143833323141508683511587494099947], 
    [4703876129197142125022027546056374628773407486545912089294631654206924837833,2102613898089944769873946877251915185853829869807095889322088156879691423118], 
    [3217442759980153302560377812706121327315311706939953194088892128052785645238,14321749769873218821418862987180582356049810670379403809430999625785428728788], 
    [13817345498172662452614431613320360488762345337194044859874174652793281234156,20964657014866936144542171868228643614782500343392074123144168540720225981062], 
    [10841200175738382427220538320068424161944317638336089481641102509416999740074,7787325652008096802632731076271724910851582335115295970269540282957181078451]
  ];
  
  //1. compute z = ComX(pp;x)
  bool[256] xbit1 = unpack256bool(x);
  bool[256] xbit2 = unpack256bool(x**2);
  bool[256] xbit3 = unpack256bool(x**3);
  bool[256] xbit4 = unpack256bool(x**4);
  bool[256] xbit5 = unpack256bool(x**5);
  bool[256] xbit6 = unpack256bool(x**6);
  bool[256] xbit7 = unpack256bool(x**7);
  bool[256] xbit8 = unpack256bool(x**8);
  bool[256] xbit9 = unpack256bool(x**9);
  bool[256] xbit10 = unpack256bool(x**10);

  bool[256] xbit11 = unpack256bool(x*11);
  bool[256] xbit12 = unpack256bool(x**12);
  bool[256] xbit13 = unpack256bool(x**13);
  bool[256] xbit14 = unpack256bool(x**14);
  bool[256] xbit15 = unpack256bool(x**15);
  bool[256] xbit16 = unpack256bool(x**16);
  bool[256] xbit17 = unpack256bool(x**17);
  bool[256] xbit18 = unpack256bool(x**18);
  bool[256] xbit19 = unpack256bool(x**19);
  bool[256] xbit20 = unpack256bool(x**20);

  bool[256] xbit21 = unpack256bool(x**21);
  bool[256] xbit22 = unpack256bool(x**22);
  bool[256] xbit23 = unpack256bool(x**23);
  bool[256] xbit24 = unpack256bool(x**24);
  bool[256] xbit25 = unpack256bool(x**25);
  bool[256] xbit26 = unpack256bool(x**26);
  bool[256] xbit27 = unpack256bool(x**27);
  bool[256] xbit28 = unpack256bool(x**28);
  bool[256] xbit29 = unpack256bool(x**29);
  bool[256] xbit30 = unpack256bool(x**30);

  bool[256] xbit31 = unpack256bool(x**31);
  bool[256] xbit32 = unpack256bool(x**32);
  bool[256] xbit33 = unpack256bool(x**33);
  bool[256] xbit34 = unpack256bool(x**34);
  bool[256] xbit35 = unpack256bool(x**35);
  bool[256] xbit36 = unpack256bool(x**36);
  bool[256] xbit37 = unpack256bool(x**37);
  bool[256] xbit38 = unpack256bool(x**38);
  bool[256] xbit39 = unpack256bool(x**39);
  bool[256] xbit40 = unpack256bool(x**40);

  bool[256] xbit41 = unpack256bool(x**41);
  bool[256] xbit42 = unpack256bool(x**42);
  bool[256] xbit43 = unpack256bool(x**43);
  bool[256] xbit44 = unpack256bool(x**44);
  bool[256] xbit45 = unpack256bool(x**45);
  bool[256] xbit46 = unpack256bool(x**46);
  bool[256] xbit47 = unpack256bool(x**47);
  bool[256] xbit48 = unpack256bool(x**48);
  bool[256] xbit49 = unpack256bool(x**49);
  bool[256] xbit50 = unpack256bool(x**50);

  bool[256] xbit51 = unpack256bool(x**51);
  bool[256] xbit52 = unpack256bool(x**52);
  bool[256] xbit53 = unpack256bool(x**53);
  bool[256] xbit54 = unpack256bool(x**54);
  bool[256] xbit55 = unpack256bool(x**55);
  bool[256] xbit56 = unpack256bool(x**56);
  bool[256] xbit57 = unpack256bool(x**57);
  bool[256] xbit58 = unpack256bool(x**58);
  bool[256] xbit59 = unpack256bool(x**59);

  bool[256] xbit60 = unpack256bool(x**60);
  bool[256] xbit61 = unpack256bool(x**61);
  bool[256] xbit62 = unpack256bool(x**62);
  bool[256] xbit63 = unpack256bool(x**63);
  bool[256] xbit64 = unpack256bool(x**64);

  field[2] gx1 = scalarMult(xbit1, P[0], context);
  field[2] gx2 = scalarMult(xbit2, P[1], context);
  field[2] gx3 = scalarMult(xbit3, P[2], context);
  field[2] gx4 = scalarMult(xbit4, P[3], context);
  field[2] gx5 = scalarMult(xbit5, P[4], context);
  field[2] gx6 = scalarMult(xbit6, P[5], context);
  field[2] gx7 = scalarMult(xbit7, P[6], context);
  field[2] gx8 = scalarMult(xbit8, P[7], context);
  field[2] gx9 = scalarMult(xbit9, P[8], context);
  field[2] gx10 = scalarMult(xbit10, P[9], context);

  field[2] gx11 = scalarMult(xbit11, P[10], context);
  field[2] gx12 = scalarMult(xbit12, P[11], context);
  field[2] gx13 = scalarMult(xbit13, P[12], context);
  field[2] gx14 = scalarMult(xbit14, P[13], context);
  field[2] gx15 = scalarMult(xbit15, P[14], context);
  field[2] gx16 = scalarMult(xbit16, P[15], context);
  field[2] gx17 = scalarMult(xbit17, P[16], context);
  field[2] gx18 = scalarMult(xbit18, P[17], context);
  field[2] gx19 = scalarMult(xbit19, P[18], context);
  field[2] gx20 = scalarMult(xbit20, P[19], context);

  field[2] gx21 = scalarMult(xbit21, P[20], context);
  field[2] gx22 = scalarMult(xbit22, P[21], context);
  field[2] gx23 = scalarMult(xbit23, P[22], context);
  field[2] gx24 = scalarMult(xbit24, P[23], context);
  field[2] gx25 = scalarMult(xbit25, P[24], context);
  field[2] gx26 = scalarMult(xbit26, P[25], context);
  field[2] gx27 = scalarMult(xbit27, P[26], context);
  field[2] gx28 = scalarMult(xbit28, P[27], context);
  field[2] gx29 = scalarMult(xbit29, P[28], context);
  field[2] gx30 = scalarMult(xbit30, P[29], context);

  field[2] gx31 = scalarMult(xbit31, P[30], context);
  field[2] gx32 = scalarMult(xbit32, P[31], context);
  field[2] gx33 = scalarMult(xbit33, P[32], context);
  field[2] gx34 = scalarMult(xbit34, P[33], context);
  field[2] gx35 = scalarMult(xbit35, P[34], context);
  field[2] gx36 = scalarMult(xbit36, P[35], context);
  field[2] gx37 = scalarMult(xbit37, P[36], context);
  field[2] gx38 = scalarMult(xbit38, P[37], context);
  field[2] gx39 = scalarMult(xbit39, P[38], context);
  field[2] gx40 = scalarMult(xbit40, P[39], context);

  field[2] gx41 = scalarMult(xbit41, P[40], context);
  field[2] gx42 = scalarMult(xbit42, P[41], context);
  field[2] gx43 = scalarMult(xbit43, P[42], context);
  field[2] gx44 = scalarMult(xbit44, P[43], context);
  field[2] gx45 = scalarMult(xbit45, P[44], context);
  field[2] gx46 = scalarMult(xbit46, P[45], context);
  field[2] gx47 = scalarMult(xbit47, P[46], context);
  field[2] gx48 = scalarMult(xbit48, P[47], context);
  field[2] gx49 = scalarMult(xbit49, P[48], context);
  field[2] gx50 = scalarMult(xbit50, P[49], context);

  field[2] gx51 = scalarMult(xbit51, P[50], context);
  field[2] gx52 = scalarMult(xbit52, P[51], context);
  field[2] gx53 = scalarMult(xbit53, P[52], context);
  field[2] gx54 = scalarMult(xbit54, P[53], context);
  field[2] gx55 = scalarMult(xbit55, P[54], context);
  field[2] gx56 = scalarMult(xbit56, P[55], context);
  field[2] gx57 = scalarMult(xbit57, P[56], context);
  field[2] gx58 = scalarMult(xbit58, P[57], context);
  field[2] gx59 = scalarMult(xbit59, P[58], context);

  field[2] gx60 = scalarMult(xbit60, P[59], context);
  field[2] gx61 = scalarMult(xbit61, P[60], context);
  field[2] gx62 = scalarMult(xbit62, P[61], context);
  field[2] gx63 = scalarMult(xbit63, P[62], context);
  field[2] gx64 = scalarMult(xbit64, P[63], context);


  field[2] mut z = [0,1];

  field[65][2] gx = [gx1,gx2,gx3,gx4,gx5,gx6,gx7,gx8,gx9,gx10,\
                     gx11,gx12,gx13,gx14,gx15,gx16,gx17,gx18,gx19,gx20,\
                     gx21,gx22,gx23,gx24,gx25,gx26,gx27,gx28,gx29,gx30,\
                     gx31,gx32,gx33,gx34,gx35,gx36,gx37,gx38,gx39,gx40,\
                     gx41,gx42,gx43,gx44,gx45,gx46,gx47,gx48,gx49,gx50,\
                     gx51,gx52,gx53,gx54,gx55,gx56,gx57,gx58,gx59,gx60,\
                     gx61,gx62,gx63,gx64,G];
  for u32 i in 0..65{
    z = add(z, gx[i], context);
  }
  //2. compute a simple commitment c = g^x
  field[2] c = scalarMult(xbit1, G, context);
  return [z,gx];
}
