import "ecc/edwardsScalarMult" as scalarMult;
import "ecc/edwardsAdd" as add;
import "utils/pack/bool/nonStrictUnpack256" as unpack256bool;
from "ecc/babyjubjubParams" import BabyJubJubParams;
import "ecc/babyjubjubParams" as context;
import "hashes/poseidon/poseidon" as poseidon;
 
def main(private field w, private field r, private field[128][2] z) -> field[4]{
  BabyJubJubParams context = context();
  field[2] G = [context.Gu, context.Gv];

  // field r = 11111994;
  bool[256] rbit = unpack256bool(r);
  bool[256] wbit = unpack256bool(w);
 
  //compute zeta. Instead of sampling zeta from E(F_p), user can sample w in Zq and compute zeta
  field[2] zeta = scalarMult(wbit,G,context);
  field sf = poseidon(zeta);

  //1. compute public key pf
  bool[256] sfbit = unpack256bool(sf);
  field[2] pf = scalarMult(sfbit, G, context);

  //2. compute hash_1 = H([z]_n)
  field[42] mut buf = [0,0,0,0,0,0,0,0,0,0,0,\
                       0,0,0,0,0,0,0,0,0,0,0,\
                       0,0,0,0,0,0,0,0,0,0,0,\
                       0,0,0,0,0,0,0,0,0 ];
  u32 mut j = 0;
  for u32 i in 0..42{
    buf[i] = poseidon([z[j][0],z[j][1],z[j+1][0],z[j+1][1],z[j+2][0],z[j+2][1]]);
    j = j+3;
  }

  field[9] mut sfin = [0,0,0,0,0,0,0,0,0];
  sfin[0] = poseidon([buf[0],buf[1],buf[2],buf[3],buf[4],buf[5]]);
  sfin[1] = poseidon([buf[6],buf[7],buf[8],buf[9],buf[10],buf[11]]);
  sfin[2] = poseidon([buf[12],buf[13],buf[14],buf[15],buf[16],buf[17]]);
  sfin[3] = poseidon([buf[18],buf[19],buf[20],buf[21],buf[22],buf[23]]);
  sfin[4] = poseidon([buf[24],buf[25],buf[26],buf[27],buf[28],buf[29]]);
  sfin[5] = poseidon([buf[30],buf[31],buf[32],buf[33],buf[34],buf[35]]);
  sfin[6] = poseidon([buf[36],buf[37],buf[38],buf[39],buf[40],buf[41]]);
  sfin[7] = poseidon([sfin[0],sfin[1],sfin[2],sfin[3],sfin[4],sfin[5]]);
  sfin[8] = poseidon([sfin[6],sfin[7],z[126][0],z[126][1],z[127][0],z[127][1]]);

  //3. compute [y]_n
  field[128][2] mut y = [[0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0],\ 
                         [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0],\ 
                         [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0],\ 
                         [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0],\ 
                         [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0],\ 
                         [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0],\ 
                         [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0],\ 
                         [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0],\ 
                         [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0],\ 
                         [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0],\ 
                         [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0],\ 
                         [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0],\ 
                         [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0], [0,0]];

  for u32 i in 0..128{
    y[i] = add(zeta, scalarMult(rbit, z[i], context), context);
  }

  //4. Compute hash_2 = H([y]_n)
  field[42] mut bufy = [0,0,0,0,0,0,0,0,0,0,0,\
                        0,0,0,0,0,0,0,0,0,0,0,\
                        0,0,0,0,0,0,0,0,0,0,0,\
                        0,0,0,0,0,0,0,0,0 ];
  u32 mut k = 0;
  for u32 i in 0..42{
    bufy[i] = poseidon([y[k][0],y[k][1],y[k+1][0],y[k+1][1],y[k+2][0],y[k+2][1]]);
    k = k+3;
  }

  field[9] mut sfiny = [0,0,0,0,0,0,0,0,0];
  sfiny[0] = poseidon([bufy[0],bufy[1],bufy[2],bufy[3],bufy[4],bufy[5]]);
  sfiny[1] = poseidon([bufy[6],bufy[7],bufy[8],bufy[9],bufy[10],bufy[11]]);
  sfiny[2] = poseidon([bufy[12],bufy[13],bufy[14],bufy[15],bufy[16],bufy[17]]);
  sfiny[3] = poseidon([bufy[18],bufy[19],bufy[20],bufy[21],bufy[22],bufy[23]]);
  sfiny[4] = poseidon([bufy[24],bufy[25],bufy[26],bufy[27],bufy[28],bufy[29]]);
  sfiny[5] = poseidon([bufy[30],bufy[31],bufy[32],bufy[33],bufy[34],bufy[35]]);
  sfiny[6] = poseidon([bufy[36],bufy[37],bufy[38],bufy[39],bufy[40],bufy[41]]);
  sfiny[7] = poseidon([sfiny[0],sfiny[1],sfiny[2],sfiny[3],sfiny[4],sfiny[5]]);
  sfiny[8] = poseidon([sfiny[6],sfiny[7],y[126][0],y[126][1],y[127][0],y[127][1]]);

  return [pf[0], pf[1], sfin[8],sfiny[8]];
}